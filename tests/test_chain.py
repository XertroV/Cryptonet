#!/usr/bin/env python3

import unittest
import threading
import time

import cryptonet
import cryptonet.datastructs
from cryptonet.debug import debug

import examples.minblock

Block = examples.minblock.MinBlock

class TestChain(unittest.TestCase):
    ''' Test Chain functions.
    * find_lca
    '''

    def setUp(self):
        chain_vars = cryptonet.datastructs.ChainVars()
        chain_vars.genesis_binary = b'\x01\x01\x00\x01\x00\x01\x00'
        self.min_net = cryptonet.Cryptonet(chain_vars)
        self.chain = self.min_net.chain

        self.min_net.block(examples.minblock.MinBlock)

    def test_recursively_mark_invalid(self):
        blocks = [
            b'\x01!\x00\x96\xe2\x01*\xe1\x83_\x1b\x97\xd8R\x1cEX\xa8w\xb9\x8f]\xbd_\xbe\x08/jwG\xea\xa6I\xfe\t\x01\x01\x01\x01',
            b'\x01!\x00\xf2\x89\xe3\x18.\xa0\r\xac\xb37Sb\xb7T\xc7\xe9v\n\xf1\x08\x1e\x9du\xc6\x19\x96\xba\xef\x03=\xc0]\x01\x02\x01\x01',
            b'\x01!\x00\xb7\xd4r\t\x8f\x9c\xbcBA\x9b.\xbb\x8e\x0cVu\xa5t\xa1U\xa54f\xfd\x99@m\x82\xe0\xb8Z\x85\x01\x03\x01\x01',
            b'\x01 4\\9\xa4<\xa5\t#\xea?4\xc0\xa5\x05\x88\xe0\xb3\x15\x85\x85\xac]]\x9a\xb3\xcd[\xd9\xdbh\x06\xec\x01\x04\x01\x01',
            b'\x01!\x00\x91\xbct|\x8e\xdaNQT\x83\x8c\xad\xbff*.y\xff\x9a\xa0%\xb2\x12!c\x93\xe8\xec\xa1)\xdcI\x01\x05\x01\x01',
            b'\x01!\x00\xc6^\x05\xd1<rN\xf2\\\x8aw\xef\x91q\xc7]\x106\x81\xd4.c:\xe0\xef\xb5\x93\x15#P\x8fh\x01\x06\x01\x01',
            b'\x01 i\x1a\xa2\xb1\x8f&\xfa\xd1;!\x19\x85W\xd40\x84\xcc\xb7\x03=\xb8\xdba\xa1QD\xb3\xe3N\xacTs\x01\x07\x01\x01',
            b'\x01!\x00\xf8D\xb5\xa0\x83>\x18\x8bo\x99]\xce\xf1\xd6s\t{"\x95\xdaEK\xbbSO\x8b\x1e$[\xf3v\x0f\x01\x08\x01\x01',
            b'\x01!\x00\xb9\x886\xe1S\x86W\xa0/\xa5\xe6.\x7ffP5\x86r\xfe\xd3\x93\xc8 r\xfb\x1c\xfbR\xab\xe6\x93v\x01\t\x01\x01',
            b'\x01!\x00\x92\xc1*\x94\x80o}\xc5+\x88\xb0\xf6\xcdo\x17\x7fg7s9\xc3\x886Y\x84\xac\xf91|\x00(T\x01\n\x01\x01',
            b'\x01 4\x0fpKCz\xe5\xa6\x11\x99\xe5\xc5\xb9\xdd\xe7\x02\xe6\xe2\xb9@eGe2ap\x07\xf1ms\xa70\x01\x0b\x01\x01',
            b"\x01!\x00\xd3p\x03 \x12^\xc5\xc0\x10@\x01\x8c\x12O\x7f\xf6Y\xf6\x13\xa33g|\xd7\xc2'\xe6o\x1e\x90\x9a\x85\x01\x0c\x01\x01",
        ]

        now_invalid = 0x92c12a94806f7dc52b88b0f6cd6f177f67377339c388365984acf9317c002854
        now_invalid_parent = 0xb98836e1538657a02fa5e62e7f6650358672fed393c82072fb1cfb52abe69376

        for serialized_block in blocks:
            block = Block.make(serialized_block)
            block.assert_validity(self.chain)
            self.chain.add_block(block)

        self.assertEqual(self.chain.head.get_hash(), 0x8bb92b9bcbae734a534616ee2a5377dd20cc647547db3af02e82787776117159)

        self.chain.recursively_mark_invalid(now_invalid)
        self.chain.construct_best_chain()

        self.assertEqual(self.chain.head.get_hash(), now_invalid_parent)

    def test_recursively_mark_invalid_with_reorg(self):
        ''' Test chain that forks at block 8.
         Mark one branch invalid, then check we switched to the other branch.
        '''
        blocks = [
            b'\x01!\x00\x96\xe2\x01*\xe1\x83_\x1b\x97\xd8R\x1cEX\xa8w\xb9\x8f]\xbd_\xbe\x08/jwG\xea\xa6I\xfe\t\x01\x01\x01\x01',
            b'\x01!\x00\xf2\x89\xe3\x18.\xa0\r\xac\xb37Sb\xb7T\xc7\xe9v\n\xf1\x08\x1e\x9du\xc6\x19\x96\xba\xef\x03=\xc0]\x01\x02\x01\x01',
            b'\x01!\x00\xb7\xd4r\t\x8f\x9c\xbcBA\x9b.\xbb\x8e\x0cVu\xa5t\xa1U\xa54f\xfd\x99@m\x82\xe0\xb8Z\x85\x01\x03\x01\x01',
            b'\x01 4\\9\xa4<\xa5\t#\xea?4\xc0\xa5\x05\x88\xe0\xb3\x15\x85\x85\xac]]\x9a\xb3\xcd[\xd9\xdbh\x06\xec\x01\x04\x01\x01',
            b'\x01!\x00\x91\xbct|\x8e\xdaNQT\x83\x8c\xad\xbff*.y\xff\x9a\xa0%\xb2\x12!c\x93\xe8\xec\xa1)\xdcI\x01\x05\x01\x01',
            b'\x01!\x00\xc6^\x05\xd1<rN\xf2\\\x8aw\xef\x91q\xc7]\x106\x81\xd4.c:\xe0\xef\xb5\x93\x15#P\x8fh\x01\x06\x01\x01',
            b'\x01 i\x1a\xa2\xb1\x8f&\xfa\xd1;!\x19\x85W\xd40\x84\xcc\xb7\x03=\xb8\xdba\xa1QD\xb3\xe3N\xacTs\x01\x07\x01\x01',
            b'\x01!\x00\xf8D\xb5\xa0\x83>\x18\x8bo\x99]\xce\xf1\xd6s\t{"\x95\xdaEK\xbbSO\x8b\x1e$[\xf3v\x0f\x01\x08\x01\x01',
            b'\x01!\x00\xb9\x886\xe1S\x86W\xa0/\xa5\xe6.\x7ffP5\x86r\xfe\xd3\x93\xc8 r\xfb\x1c\xfbR\xab\xe6\x93v\x01\t\x01\x01',
            b'\x01!\x00\x92\xc1*\x94\x80o}\xc5+\x88\xb0\xf6\xcdo\x17\x7fg7s9\xc3\x886Y\x84\xac\xf91|\x00(T\x01\n\x01\x01',
            b'\x01 4\x0fpKCz\xe5\xa6\x11\x99\xe5\xc5\xb9\xdd\xe7\x02\xe6\xe2\xb9@eGe2ap\x07\xf1ms\xa70\x01\x0b\x01\x01',
            b"\x01!\x00\xd3p\x03 \x12^\xc5\xc0\x10@\x01\x8c\x12O\x7f\xf6Y\xf6\x13\xa33g|\xd7\xc2'\xe6o\x1e\x90\x9a\x85\x01\x0c\x01\x01",
            b'\x01!\x00\xb9\x886\xe1S\x86W\xa0/\xa5\xe6.\x7ffP5\x86r\xfe\xd3\x93\xc8 r\xfb\x1c\xfbR\xab\xe6\x93v\x01\t\x01\x02',
            b'\x01 |:\x1c\xe4T\xa2\x1e\xa7fx\x97\xc2\xc4\xdf\x88\xf8/\xfe\x1f\xb2\x15\xe6}@\xd1\x84(\xe9\xf9\x11o\xa2\x01\n\x01\x01',
            b'\x01!\x00\xa8d\x13\xc0\xe3I\xc6\x8cIl\x96\x98\x11\xdc\xbbd\xdc\x1bn_\x85\xa9\xfdj=\xd7\x12\x08\xf6A\xf0\x10\x01\x0b\x01\x01',
            b'\x01 V\x1a}Z\xd8Ch\xb5o}2\x05\x90\xf9}G7\x7f\xca\xbcb\x81\xee\xb1\xf1}*Y\xd4G\xc8`\x01\x0c\x01\x01',
        ]

        for serialized_block in blocks:
            block = Block.make(serialized_block)
            block.assert_validity(self.chain)
            self.chain.add_block(block)

        self.assertEqual(self.chain.find_lca(0xeedff8c8cd0c6c2e2a3a12e9048159229a6cfbdac7592c7f46d3ae8eef539b6c, 0x8bb92b9bcbae734a534616ee2a5377dd20cc647547db3af02e82787776117159).get_hash(), 0xb98836e1538657a02fa5e62e7f6650358672fed393c82072fb1cfb52abe69376)

        self.assertEqual(self.chain.head.get_hash(), 0x8bb92b9bcbae734a534616ee2a5377dd20cc647547db3af02e82787776117159)

        now_invalid = 0x92c12a94806f7dc52b88b0f6cd6f177f67377339c388365984acf9317c002854
        self.chain.recursively_mark_invalid(now_invalid)
        self.chain.construct_best_chain()

        time.sleep(0.5)

        self.assertEqual(self.chain.head.get_hash(), 0xeedff8c8cd0c6c2e2a3a12e9048159229a6cfbdac7592c7f46d3ae8eef539b6c)


    def tearDown(self):
        self.min_net.shutdown()
        #pass

if __name__ == '__main__':
    unittest.main()
